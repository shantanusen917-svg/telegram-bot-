from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
import csv, os
from datetime import datetime

# ===== CONFIGURATION =====
BOT_TOKEN = os.getenv("BOT_TOKEN")  # Token Render ржП Environment Variable ржП ржерж╛ржХржмрзЗ
ADMIN_ID = int(os.getenv("ADMIN_ID", 6345288802))
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "@ajahajahh")
PAYEER_UID = os.getenv("PAYEER_UID", "P1123839604")
CSV_FILE = "exchange_requests.csv"
current_rate = int(os.getenv("CURRENT_RATE", 125))

# Steps
AMOUNT, METHOD, NUMBER, SCREENSHOT = range(4)

# CSV рждрзИрж░рж┐ ржХрж░рж╛ ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["рж╕ржорзЯрж╕рзВржЪрж┐","UserID","Username","Amount","Method","Number","ScreenshotFileID"])

# ===== FUNCTION =====
def save_to_csv(user_id, username, amount, method, number, screenshot_file_id):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, user_id, username, amount, method, number, screenshot_file_id])
    print(f"тЬЕ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: {username}, {amount} USD")

# ===== HANDLERS =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("ЁЯТ░ Rate"), KeyboardButton("ЁЯФБ Exchange")],
                [KeyboardButton("ЁЯЖШ Help")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "ЁЯМР рж╕рзНржмрж╛ржЧрждржо ржЖржорж╛ржжрзЗрж░ USD тЖТ BDT ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржмржЯрзЗ ЁЯТ╡\n\n"
        "ЁЯСЗ ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржи ржерзЗржХрзЗ ржмрзЗржЫрзЗ ржирж┐ржи:", reply_markup=reply_markup)

async def rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"ЁЯТ▒ ржЖржЬржХрзЗрж░ ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ рж░рзЗржЯ:\n1 USD = {current_rate} BDT\n\nтЪб рж░рзЗржЯ рж╕ржорзЯ ржЕржирзБржпрж╛рзЯрзА ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣рждрзЗ ржкрж╛рж░рзЗред")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"ЁЯЖШ рж╕рж╛рж╣рж╛ржпрзНржп ржжрж░ржХрж╛рж░?\n\nЁЯСитАНЁЯТ╝ Admin: {ADMIN_USERNAME}\nтП░ рж╕ржорзЯ: рж╕ржХрж╛рж▓ 10ржЯрж╛ - рж░рж╛ржд 10ржЯрж╛\n\nтЪая╕П рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ Admin-ржПрж░ рж╕рж╛ржерзЗржЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"
    )

async def exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ЁЯТ╕ ржЖржкржирж┐ ржХржд USD ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржХрж░рждрзЗ ржЪрж╛ржи?\nржЙржжрж╛рж╣рж░ржг: 10, 20, 50 ржЗрждрзНржпрж╛ржжрж┐", reply_markup=ReplyKeyboardRemove())
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("тЪая╕П ржжрзЯрж╛ ржХрж░рзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред ржЙржжрж╛рж╣рж░ржг: 10, 20, 50")
        return AMOUNT
    context.user_data["amount"] = update.message.text
    keyboard = [[KeyboardButton("ЁЯУ▒ Nagad"), KeyboardButton("ЁЯТ│ Bkash"), KeyboardButton("ЁЯПж Rocket")]]
    await update.message.reply_text(
        f"тЬЕ ржзржирзНржпржмрж╛ржж! ржЖржкржирж┐ {context.user_data['amount']} USD ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржХрж░рждрзЗ ржЪрж╛ржЪрзНржЫрзЗржиред\n\n"
        "ржПржЦржи ржмрж▓рзБржи тАФ ржХрзЛржи ржорж╛ржзрзНржпржорзЗ ржЯрж╛ржХрж╛ ржирж┐рждрзЗ ржЪрж╛ржи ЁЯСЗ", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return METHOD

async def get_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["method"] = update.message.text
    await update.message.reply_text(f"ЁЯУ▓ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ {context.user_data['method']} ржирж╛ржорзНржмрж╛рж░ ржкрж╛ржарж╛ржи (ржпрзЗржоржи: 017XXXXXXXX)")
    return NUMBER

async def get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["number"] = update.message.text
    await update.message.reply_text(
        f"тЬЕ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржЦржи ржЖржорж╛ржжрзЗрж░ Payeer Account-ржП {context.user_data['amount']} USD ржкрж╛ржарж╛ржи:\n\n"
        f"ЁЯТ╝ Payeer UID: {PAYEER_UID}\n\nЁЯУ╖ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗ ржЧрзЗрж▓рзЗ ржЯрзНрж░рж╛ржирзНрж╕ржлрж╛рж░ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи ржПржЦрж╛ржирзЗред"
    )
    return SCREENSHOT

async def get_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    amount = context.user_data["amount"]
    method = context.user_data["method"]
    number = context.user_data["number"]

    photo_id = None
    if update.message.photo:
        photo_id = update.message.photo[-1].file_id
    elif update.message.document and update.message.document.mime_type.startswith("image/"):
        photo_id = update.message.document.file_id

    if photo_id:
        save_to_csv(user.id, user.username or "Unknown", amount, method, number, photo_id)
        await update.message.reply_text("ЁЯУй рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ тЬЕ ржпрж╛ржЪрж╛ржЗ ржЪрж▓ржЫрзЗ...")
        caption = (
            f"ЁЯЖХ ржирждрзБржи ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ\n\n"
            f"ЁЯСд User: @{user.username or 'Unknown'}\n"
            f"ЁЯТ╡ Amount: {amount} USD\n"
            f"ЁЯТ│ Method: {method}\n"
            f"ЁЯУ▓ Number: {number}"
        )
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=photo_id, caption=caption)
    else:
        await update.message.reply_text("тЪая╕П ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи (image ржЖржХрж╛рж░рзЗ)ред")
        return SCREENSHOT
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "тЭМ ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("ЁЯТ░ Rate"), KeyboardButton("ЁЯФБ Exchange")],
             [KeyboardButton("ЁЯЖШ Help")]], resize_keyboard=True
        )
    )
    return ConversationHandler.END

# ===== Admin Commands =====
async def set_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_rate
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        try:
            current_rate = int(context.args[0])
            await update.message.reply_text(f"тЬЕ рж░рзЗржЯ ржЖржкржбрзЗржЯ рж╣рзЯрзЗржЫрзЗ!\n1 USD = {current_rate} BDT")
        except:
            await update.message.reply_text("тЪая╕П ржмрзНржпржмрж╣рж╛рж░: /setrate <Rate>")
    else:
        await update.message.reply_text("тЭМ рж╢рзБржзрзБржорж╛рждрзНрж░ Admin ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред")

async def set_payeer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PAYEER_UID
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        try:
            PAYEER_UID = context.args[0]
            await update.message.reply_text(f"тЬЕ ржирждрзБржи Payeer UID рж╕рзЗржЯ ржХрж░рж╛ рж╣рж▓рзЛ: {PAYEER_UID}")
        except:
            await update.message.reply_text("тЪая╕П ржмрзНржпржмрж╣рж╛рж░: /setpayeer <PayeerUID>")
    else:
        await update.message.reply_text("тЭМ рж╢рзБржзрзБржорж╛рждрзНрж░ Admin ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред")

async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID, ADMIN_USERNAME
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        try:
            new_admin_id = int(context.args[0])
            new_admin_username = context.args[1]
            ADMIN_ID = new_admin_id
            ADMIN_USERNAME = new_admin_username
            await update.message.reply_text(f"тЬЕ ржирждрзБржи Admin рж╕рзЗржЯ ржХрж░рж╛ рж╣рж▓рзЛ:\nID: {ADMIN_ID}\nUsername: {ADMIN_USERNAME}")
        except:
            await update.message.reply_text("тЪая╕П ржмрзНржпржмрж╣рж╛рж░: /setadmin <AdminID> <@Username>")
    else:
        await update.message.reply_text("тЭМ рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрж░рзНрждржорж╛ржи Admin ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред")

# ===== MAIN =====
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^ЁЯФБ Exchange$"), exchange)],
        states={
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)],
            METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_method)],
            NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_number)],
            SCREENSHOT: [MessageHandler(filters.PHOTO | filters.Document.IMAGE, get_screenshot)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^ЁЯТ░ Rate$"), rate))
    app.add_handler(MessageHandler(filters.Regex("^ЁЯЖШ Help$"), help_cmd))
    app.add_handler(conv_handler)

    app.add_handler(CommandHandler("setrate", set_rate))
    app.add_handler(CommandHandler("setpayeer", set_payeer))
    app.add_handler(CommandHandler("setadmin", set_admin))

    print("ЁЯдЦ Bot running...")
    app.run_polling()

if __name__ == "__main__":
    main()
